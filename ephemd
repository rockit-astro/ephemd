#!/usr/bin/env python3
#
# This file is part of ephemd.
#
# ephemd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ephemd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ephemd.  If not, see <http://www.gnu.org/licenses/>.

"""Exposes the current sun and moon positions for Warwick telescopes environment daemon"""

import argparse
from astropy.coordinates import get_sun, get_moon, EarthLocation, AltAz
from astropy.time import Time
from astropy import units as u
import numpy as np
import Pyro4
from warwick.observatory.ephemeris import Config


def moon_illumination(sun_coord, moon_coord):
    """Calculate the moon illumination as a fraction between 0 and 1"""
    elongation = sun_coord.separation(moon_coord)
    phase = np.arctan2(sun_coord.distance * np.sin(elongation),
                       moon_coord.distance - sun_coord.distance * np.cos(elongation))
    return ((1 + np.cos(phase)) / 2.0).value


class EphemerisDaemon:
    """Wraps a web request to the TNG weather feed"""
    def __init__(self, config):
        # pylint: disable=no-member
        self._location = EarthLocation(lat=config.latitude*u.deg,
                                       lon=config.longitude*u.deg,
                                       height=config.altitude*u.m)
        # pylint: enable=no-member

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""

        now = Time.now()
        frame = AltAz(obstime=now, location=self._location)
        sun = get_sun(now).transform_to(frame)
        moon = get_moon(now).transform_to(frame)

        return {
            'date': now.strftime('%Y-%m-%dT%H:%M:%SZ'),
            'sun_alt': sun.alt.value,
            'moon_alt': moon.alt.value,
            'moon_percent_illumination': round(100 * moon_illumination(sun, moon), 1)
        }


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Environment Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(EphemerisDaemon(c))
